{
	"info": {
		"_postman_id": "d8dafa94-9f15-45a6-9d09-bf78dd984d93",
		"name": "StudentCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21960836",
		"_collection_link": "https://crimson-crescent-571091.postman.co/workspace/MyWorkspace~9ec24252-c8cf-4a3d-9fac-d9ca75bfb393/collection/21960836-d8dafa94-9f15-45a6-9d09-bf78dd984d93?action=share&source=collection_link&creator=21960836"
	},
	"item": [
		{
			"name": "GetAllRequest",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Example for Checking status code\r",
							"//1.1. To test the status code\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200); // Assertion\r",
							"});\r",
							"// 1.2. o save multiple status code for one request\r",
							"pm.test(\"Successful GET request\", () => {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"\r",
							"// 2. Example for checking status code text\r",
							"// 2.1 To check GET request status code text\r",
							"pm.test(\"GET Request-Status Code String\", () => {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"// 3. Example for checking header name\r",
							"// 3.1 Check that response header is present\r",
							"pm.test(\"Content-Type header is present\", () =>{\r",
							"   pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"// 4. Example for checking header name and value\r",
							"// Test for the repose header having a particular value\r",
							"pm.test(\"Content-Type headers is application/json\", () => {\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');\r",
							"})\r",
							"\r",
							"// 5. Example for Testing Cookies\r",
							"// 5.1 Test if a cookie is present inthe resonse:\r",
							"pm.test(\"Cookie 'language' is present\", () => {\r",
							"  pm.expect(pm.cookies.has('language')).to.be.true;\r",
							"});\r",
							"\r",
							"// 5.2 Test For a particular cookie values\r",
							"pm.test(\"Cookie language has 1 value\", () => {\r",
							"    pm.expect(pm.cookies.get('language')).to.eql('en-gb');\r",
							"});\r",
							"\r",
							"\r",
							"// 6. Example for testing response time\r",
							"// Test for the response time will be within the specific range\r",
							"pm.test(\"Response time is between 20 and  40ms\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(20).below(40);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3500/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3500",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetSingleStudent",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();  // Global variable declared outside the functiom, which is accessed by all the functionss\r",
							"// 7. Response validation\r",
							"// 7.1. Checking the data type of individual data \r",
							"// NOTE: Order of the field is not important\r",
							"pm.test(\"Test the data type of the response\", () => {\r",
							"   pm.expect(jsonData).to.be.an(\"object\");\r",
							"   pm.expect(jsonData.id).to.be.a(\"number\");\r",
							"   pm.expect(jsonData.phone).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.courses).to.be.an(\"array\");\r",
							"      pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"    pm.expect(jsonData.location).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// 7.2. Test array contents in response body \r",
							"pm.test(\"Checking array properties\", () => {\r",
							"   // Courses includes Laravel\r",
							"       pm.expect(jsonData.courses).to.include(\"Laravel\");\r",
							"  // Courses array =must include all listed data\r",
							"      pm.expect(jsonData.courses).to.have.members([\"Laravel\",\"VueJS\"]);\r",
							"    pm.expect(jsonData.location).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"// 7.3 Validating JSON fields in Response\r",
							"// Response\r",
							"/*{\r",
							"    \"id\": 3,\r",
							"    \"name\": \"Harini Jeba\",\r",
							"    \"location\": \"Coimbatore\",\r",
							"    \"phone\": \"9876765645\",\r",
							"    \"courses\": [\r",
							"        \"Laravel\",\r",
							"        \"VueJS\"\r",
							"    ]\r",
							"}*/\r",
							"\r",
							"pm.test(\"Value of location field in Response\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(3);\r",
							"    pm.expect(jsonData.name).to.eql(\"Harini Jeba\");\r",
							"    pm.expect(jsonData.location).to.eql(\"Coimbatore\");\r",
							"    pm.expect(jsonData.phone).to.eql(\"9876765645\");\r",
							"    pm.expect(jsonData.courses[0]).to.eql(\"Laravel\");\r",
							"    pm.expect(jsonData.courses[1]).to.eql(\"VueJS\");\r",
							"});\r",
							"\r",
							"\r",
							"// 7.4 Validating JSON Schema\r",
							"// Response\r",
							"/*var jsonData = {\r",
							"    \"id\": 3,\r",
							"    \"name\": \"Harini Jeba\",\r",
							"    \"location\": \"Coimbatore\",\r",
							"    \"phone\": \"9876765645\",\r",
							"    \"courses\": [\r",
							"        \"Laravel\",\r",
							"        \"VueJS\"\r",
							"    ]\r",
							"}; */\r",
							"var schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"    \"type\" : \"object\",\r",
							"    \"properties\" : {\r",
							"        \"id\" : { \"type\" : \"integer\" },\r",
							"         \"name\" : { \"type\" : \"string\" },\r",
							"         \"location\" : { \"type\" : \"string\" },\r",
							"          \"phone\" : { \"type\" : \"string\" },\r",
							"           \"courses\" : { \"type\" : \"array\",\r",
							"                                \"items\" : [\r",
							"                                  {  \"type\" :\"string\",\r",
							"                                    \"type\" : \"string\"\r",
							"                                  }\r",
							"                                ] },\r",
							"            \"required\" : [\"id\", \"name\", \"location\", \"phone\", \"courses\"]\r",
							"        }\r",
							"\r",
							"    };\r",
							"    pm.test('Schema is valid', function() {\r",
							"        pm.expect(tv4.validate(jsonData, schema )).to.be.true;\r",
							"    });\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3500/students/3",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3500",
					"path": [
						"students",
						"3"
					]
				},
				"description": "Get Single student details"
			},
			"response": []
		},
		{
			"name": "CreateStudentDetails",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"William\", \"location\": \"Mumbai\", \"phone\": \"7890987779\", \"courses\": [ \"PostMan\", \"Swagger\" ] }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3500/students",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3500",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateStudentDetails",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Hamilton Juna\", \"location\": \"Mumbai\", \"phone\": \"7890987779\", \"courses\": [ \"C\", \"C++\" ] }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3500/students/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3500",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		}
	]
}